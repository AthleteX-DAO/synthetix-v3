name = "bfp-market"
version = "<%= package.version %>"
description = "bfp market for Synthetix v3"

# TODO: Replace this owner '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266' (Anvil signer[0])
[setting.owner]
description = "bfp market owner"
defaultValue = "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266"

# TODO: Configurable to depending on chain.
#
# @see: https://docs.pyth.network/documentation/pythnet-price-feeds/evm
[setting.pyth]
description = "pyth evm contract address"
defaultValue = "0xff1a0f4744e8582DF1aE09D5611b887B6a12925C"

[setting.synthetixPackage]
defaultValue = "synthetix:<%= package.dependencies['@synthetixio/core-contracts'].replace('^', '') %>"

# --- External Imports --- #

# TODO: docs to download synthetix-v3 and run build/test to generate a -testable.
[import.synthetix]
source = "<%= settings.synthetixPackage %>"

# --- Market Contracts --- #

[contract.OrderModule]
artifact = "OrderModule"
args = []

[contract.LiquidationModule]
artifact = "LiquidationModule"
args = []

[contract.PerpMarketFactoryModule]
artifact = "PerpMarketFactoryModule"
args = []

[contract.MarketConfigurationModule]
artifact = "MarketConfigurationModule"
args = []

[contract.PerpAccountModule]
artifact = "PerpAccountModule"
args = []

[contract.MarketCollateralModule]
artifact = "MarketCollateralModule"
args = []

[contract.CoreModule]
artifact = "contracts/modules/CoreModule.sol:CoreModule"
args = []

# --- Market Proxy Contract --- #

[contract.InitialPerpMarketProxy]
artifact = "contracts/Proxy.sol:Proxy"
args = ["<%= contracts.CoreModule.address %>", "<%= settings.owner %>"]
abiOf = ["CoreModule"]
# What is salt?
#
# salt - The salt is a string which, when changed, will result in a new contract deployment.
# @see: https://usecannon.com/docs/technical-reference
salt = "<%= settings.salt %>"
depends = [
  "contract.CoreModule"
]

# --- Core Router --- #

[router.Router]
contracts = [
  "synthetix.AccountModule",
  "synthetix.AssociatedSystemsModule",
  "CoreModule",
  "PerpMarketFactoryModule",
  "MarketConfigurationModule",
  "PerpAccountModule",
  "MarketCollateralModule",
  "OrderModule",
  "LiquidationModule"
]
depends = [
  "import.synthetix",
  "contract.CoreModule",
  "contract.PerpMarketFactoryModule",
  "contract.MarketConfigurationModule",
  "contract.PerpAccountModule",
  "contract.MarketCollateralModule",
  "contract.OrderModule",
  "contract.LiquidationModule"
]

# --- Post Deployment --- #

[invoke.upgradeProxy]
target = ["InitialPerpMarketProxy"]
fromCall.func = "owner"
func = "upgradeTo"
args = ["<%= contracts.Router.address %>"]
# Referencing Factory-deployed Contracts
#
# @see: https://usecannon.com/docs/technical-reference/
factory.PerpMarketProxy.abiOf = ["Router"]
factory.PerpMarketProxy.event = "Upgraded"
factory.PerpMarketProxy.arg = 0
depends = [
  "contract.InitialPerpMarketProxy",
  "router.Router"
]

[invoke.setSynthetix]
target = ["PerpMarketProxy"]
fromCall.func = "owner"
func = "setSynthetix"
args = [
  "<%= imports.synthetix.contracts.CoreProxy.address %>",
]
depends = ["invoke.upgradeProxy"]

[invoke.setPyth]
target = ["PerpMarketProxy"]
fromCall.func = "owner"
func = "setPyth"
args = [
  "<%= settings.pyth %>",
]
depends = ["invoke.upgradeProxy"]

# @see: https://github.com/Synthetixio/synthetix-v3/blob/main/utils/core-modules/contracts/interfaces/IAssociatedSystemsModule.sol#L63
[invoke.initOrUpgradeNft]
target = ["PerpMarketProxy"]
from = "<%= settings.owner %>"
func = "initOrUpgradeNft"
args = [
  "<%= formatBytes32String('bfPerpAccountNft') %>",
  "Synthetix V3: BF Perp Account NFT",
  "SNX-V3-BFP-ACC",
  "",
  "<%= imports.synthetix.contracts.AccountRouter.address %>"
]
depends = ["invoke.upgradeProxy"]
factory.AccountProxy.abiOf = ["synthetix.AccountRouter"]
factory.AccountProxy.event = "AssociatedSystemSet"
factory.AccountProxy.arg = 2

# --- Mocks --- #
#
# TODO: Move this into a separate `cannonfile.test.toml` file.

[contract.SnxCollateralMock]
artifact = "contracts/mocks/CollateralMock.sol:CollateralMock"
args = []

[contract.SynthetixUsdCollateralMock]
artifact = "contracts/mocks/CollateralMock.sol:CollateralMock"
args = []
salt = "2"

[contract.WrappedStakedEthCollateralMock]
artifact = "contracts/mocks/CollateralMock.sol:CollateralMock"
args = []
salt = "3"

[invoke.initialize_snxCollateral]
target = ["SnxCollateralMock"]
func = "initialize"
args = ["SNX V3","SNXV3","18"]
depends = ["contract.SnxCollateralMock"]

[invoke.initialize_snxUsdCollateral]
target = ["SynthetixUsdCollateralMock"]
func = "initialize"
args = ["Synthetix Stablecoin","snxUSD","18"]
depends = ["contract.SynthetixUsdCollateralMock"]

[invoke.initialize_wstETHCollateral]
target = ["WrappedStakedEthCollateralMock"]
func = "initialize"
args = ["Wrapped Lido Staked ETH","wstETH","18"]
depends = ["contract.WrappedStakedEthCollateralMock"]

[contract.PythMock]
artifact = "contracts/mocks/PythMock.sol:PythMock"
args = [120, 1] # 120s, 1wei

[contract.AggregatorV3Mock]
artifact = "contracts/mocks/AggregatorV3Mock.sol:AggregatorV3Mock"
args = []

# --- Feature Flags --- #

[invoke.addToFeatureFlagAllowlist_registerMarket]
target = ["synthetix.CoreProxy"]
func = "addToFeatureFlagAllowlist"
from = "<%= settings.owner %>"
args = [
  "<%= formatBytes32String('registerMarket') %>",
  "<%= contracts.PerpMarketProxy.address %>"
]
depends = ['invoke.upgradeProxy']
